//// ------------------------------------------------------------------------------
////  <auto-generated>
////      This code was generated by SpecFlow (http://www.specflow.org/).
////      SpecFlow Version:2.2.0.0
////      SpecFlow Generator Version:2.2.0.0
//// 
////      Changes to this file may cause incorrect behavior and will be lost if
////      the code is regenerated.
////  </auto-generated>
//// ------------------------------------------------------------------------------
//#region Designer generated code
//#pragma warning disable
//namespace LunchApplication.Test.Acceptance.Features
//{
//    using TechTalk.SpecFlow;


//    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
//    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
//    [TechTalk.SpecRun.FeatureAttribute("Health", SourceFile = "Features\\Health.feature", SourceLine = 0)]
//    public partial class HealthFeature
//    {

//        private TechTalk.SpecFlow.ITestRunner testRunner;

//#line 1 "Health.feature"
//#line hidden

//        [TechTalk.SpecRun.FeatureInitialize()]
//        public virtual void FeatureSetup()
//        {
//            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
//            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Health", null, ProgrammingLanguage.CSharp, ((string[])(null)));
//            testRunner.OnFeatureStart(featureInfo);
//        }

//        [TechTalk.SpecRun.FeatureCleanup()]
//        public virtual void FeatureTearDown()
//        {
//            testRunner.OnFeatureEnd();
//            testRunner = null;
//        }

//        public virtual void TestInitialize()
//        {
//        }

//        [TechTalk.SpecRun.ScenarioCleanup()]
//        public virtual void ScenarioTearDown()
//        {
//            testRunner.OnScenarioEnd();
//        }

//        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
//        {
//            testRunner.OnScenarioStart(scenarioInfo);
//        }

//        public virtual void ScenarioCleanup()
//        {
//            testRunner.CollectScenarioErrors();
//        }

//        [TechTalk.SpecRun.ScenarioAttribute("Calling Get Health should return Status OK with message \"Service is running\"", new string[] {
//                "health"}, SourceLine = 3)]
//        public virtual void CallingGetHealthShouldReturnStatusOKWithMessageServiceIsRunning()
//        {
//            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calling Get Health should return Status OK with message \"Service is running\"", new string[] {
//                        "health"});
//#line 4
//            this.ScenarioSetup(scenarioInfo);
//#line 5
//            testRunner.Given("I am calling the health api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
//#line 6
//            testRunner.When("I call get end-point", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
//#line 7
//            testRunner.Then("the return code is ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
//#line 8
//            testRunner.And("the $result.status equals OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
//#line hidden
//            this.ScenarioCleanup();
//        }

//        [TechTalk.SpecRun.TestRunCleanup()]
//        public virtual void TestRunCleanup()
//        {
//            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
//        }
//    }

//    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.2.0.0")]
//    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
//    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
//    public partial class HealthFeature_MsTest
//    {

//        private static TechTalk.SpecFlow.ITestRunner testRunner;

//        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;

//#line 1 "Health.feature"
//#line hidden

//        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
//        {
//            get
//            {
//                return this._testContext;
//            }
//            set
//            {
//                this._testContext = value;
//            }
//        }

//        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
//        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
//        {
//            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
//            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Health", null, ProgrammingLanguage.CSharp, ((string[])(null)));
//            testRunner.OnFeatureStart(featureInfo);
//        }

//        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
//        public static void FeatureTearDown()
//        {
//            testRunner.OnFeatureEnd();
//            testRunner = null;
//        }

//        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
//        public virtual void TestInitialize()
//        {
//            if (((testRunner.FeatureContext != null)
//                        && (testRunner.FeatureContext.FeatureInfo.Title != "Health")))
//            {
//                global::LunchApplication.Test.Acceptance.Features.HealthFeature_MsTest.FeatureSetup(null);
//            }
//        }

//        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
//        public virtual void ScenarioTearDown()
//        {
//            testRunner.OnScenarioEnd();
//        }

//        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
//        {
//            testRunner.OnScenarioStart(scenarioInfo);
//            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(TestContext);
//        }

//        public virtual void ScenarioCleanup()
//        {
//            testRunner.CollectScenarioErrors();
//        }

//        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
//        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("Calling Get Health should return Status OK with message \"Service is running\"")]
//        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "Health")]
//        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCategoryAttribute("health")]
//        public virtual void CallingGetHealthShouldReturnStatusOKWithMessageServiceIsRunning()
//        {
//            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Calling Get Health should return Status OK with message \"Service is running\"", new string[] {
//                        "health"});
//#line 4
//            this.ScenarioSetup(scenarioInfo);
//#line 5
//            testRunner.Given("I am calling the health api", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
//#line 6
//            testRunner.When("I call get end-point", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
//#line 7
//            testRunner.Then("the return code is ok", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
//#line 8
//            testRunner.And("the $result.status equals OK", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
//#line hidden
//            this.ScenarioCleanup();
//        }
//    }
//}
//#pragma warning restore
//#endregion
